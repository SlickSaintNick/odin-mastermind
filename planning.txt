Spec:
- command line
- 12 turns
- Human codebreaker vs computer code setter
- First build with:
    - Computer randomly selects
    - Human player guesses
    - Computer gives feedback
- Second, refactor:
    - Human player chooses to be codebreaker or code setter.
    - Computer can guess colors following its own strategy.

Planning:
    Colors
        🔴 1 RED 
        🟢 2 GREEN
        🔵 3 BLUE
        ⚪ 4 WHITE
        🟤 5 BROWN
        🟣 6 PURPLE 
        ➖ Blank
    Success Indicators
        🔳 Black (correct color and position)
        🔲 White (correct color, wrong position)
        ➖ Blank

Board:
...........................
ROUNDS: 4       AVG:    6.4
TOTAL:  25      BEST:   5


                ❔ ❔ ❔ ❔
                  
  12           |          
  11           |          
  10           |          
   9           |          
   8           |          
   7           |          
   6           |          
   5           |          
   4           |          
   3           |          
   2           |          
   1 🔳🔳🔲➖|🟢🟢🟢🟢
    
🔴 RED    🔵 BLUE   🟤 BROWN
🟢 GREEN  ⚪ WHITE  🟣 PURPLE 

>> 

    --'exit' to quit--
..........................



PSEUDOCODE (human player vs. computer)
Init random computer sequence of 4 colours
Init empty board (2 2D arrays, 12 * 4)
While playing:
    12 times:
        Display stats
        Display board
        Prompt for input (they input using first letter of each colour).
            Quit if 'exit'
        Check player input against correct sequence
        If correct
            Player wins
                Update stats to reflect win
                Update board to reflect win
                Display new stats
                Display winning board (reveal combination)
                Prompt for new game
        Else
            Calculate feedback (black and white pegs)
            Update board for this turn.
    End loop
    Computer wins
        Update stats
End loop


Simple description of the steps (this will be the play_game method):

- CodeSetter sets a code
- 12 times:
  - CodeBreaker guesses a code
  - CodeSetter gives feedback on code
  - GameBoard is updated with guess and feedback
  - If the guess is right the game is over.
- End
- Update score.

Objects / Methods required:

Game
   def play_game
   (Holds the other objects inside itself?)
      scoreboard
      board
      players

GameBoard
   @state_guess
   @state_feedback
   def init_board
   def update_board

ScoreBoard
   @round
   @average_score
   @total_score
   @best_score
   def display_stats
   def update_stats

Player

CodeSetter < Player
   @code
   def set_code
   def check_code
   def feedback_code
   
CodeBreaker < Player
    def guess

Goals:
- Working for a single round
   - Choose a 4-color pattern
   - Display game board
   - Player guess
   - Feedback on player guess
   - Update board with player guess and feedback
